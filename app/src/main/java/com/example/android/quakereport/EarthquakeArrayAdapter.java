package com.example.android.quakereport;

import android.content.Context;
import android.graphics.drawable.GradientDrawable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.TextView;

import java.text.DecimalFormat;
import java.util.ArrayList;

public class EarthquakeArrayAdapter extends ArrayAdapter<Earthquake> {

    public EarthquakeArrayAdapter(@NonNull Context context, @NonNull ArrayList<Earthquake> earthquakes) {
        super(context, 0, earthquakes);
    }

    @NonNull
    @Override
    public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {

        // Check if the existing view is being reused, otherwise inflate the view
        View listItemView = convertView;
        if (listItemView == null) {

            listItemView = LayoutInflater.from(getContext()).inflate(
                    R.layout.list_item, parent, false);
        }

        // Get the Earthquake object located at this position in the list
        final Earthquake currentEarthquake = getItem(position);

        // Find the magnitude TextView in the list_item.xml layout using its id
        TextView magnitudeTextView = (TextView) listItemView.findViewById(R.id.magnitude_text_view);

        // Get the magnitude of the current earthquake list item
        double currentMagnitude = currentEarthquake.getMagnitude();

        // Set the magnitude TextView to the current earthquakes magnitude value
        magnitudeTextView.setText(formatDouble(currentMagnitude));

        // Set the proper background color on the magnitude circle.
        // Fetch the background from the TextView, which is a GradientDrawable.
        GradientDrawable magnitudeCircle = (GradientDrawable) magnitudeTextView.getBackground();

        // Gets the correct magnitude color based off of the currentMagnitude value
        int magnitudeColorResId = getMagnitudeColor(currentEarthquake.getMagnitude());

        // Set the color on the magnitude circle
        // Note the use of the ContextCompat.getColor()
        // setColor() takes an RGB value
        // ContextCompat.getColor()
        // Converts color resource ID into an actual integer color value
        magnitudeCircle.setColor(ContextCompat.getColor(getContext(), magnitudeColorResId));

        // Repeat above steps with location TextView and place data.
        TextView locationTextView = (TextView) listItemView.findViewById(R.id.location_text_view);
        locationTextView.setText(currentEarthquake.getlocation());

        // Repeat above steps with location offset TextView and place data.
        TextView locationOffsetTextView = (TextView) listItemView.findViewById(R.id.location_offset_text_view);
        locationOffsetTextView.setText(currentEarthquake.getLocationOffset());

        if (currentEarthquake.getLocationOffset() == null) {
            locationOffsetTextView.setVisibility(View.GONE);
            locationTextView.setGravity(Gravity.CENTER_VERTICAL);
        } else {
            locationOffsetTextView.setVisibility(View.VISIBLE);
            locationTextView.setGravity(Gravity.TOP);
        }

        // Repeat above steps with time TextView and time data.
        TextView timeTextView = (TextView) listItemView.findViewById(R.id.time_text_view);
        timeTextView.setText(currentEarthquake.getTimeString());

        // Repeat above steps with date TextView and date data.
        TextView dateTextView = (TextView) listItemView.findViewById(R.id.date_text_view);
        dateTextView.setText(currentEarthquake.getDateString());

        // Return the whole list item layout (containing 3 TextViews)
        // so that it can be displayed within the ListView
        return listItemView;
    }


    /**
     * This method truncates the current magnitude double value. Then it retrieves the
     * resource ID for the color that matches the name "magnitude<number>" (e.g. R.id.magnitude8).
     * The resource id will be used to color a circle which will surround the magnitude value.
     * The color is dark blue for earthquakes with low richter scale values and it progresses up to
     * dark red for earthquakes with high richter scale values.
     *
     * @param currentMagnitude Magnitude of earthquake whos views are currently being generated by the ListView & EarthquakeArrayAdapter
     * @return The resource ID of the color
     */
    private int getMagnitudeColor(double currentMagnitude) {

        // Convert double to int
        int truncatedVal = (int) currentMagnitude;

        // concatenate the whole number to the back of the string magnitude e.g. "magnitude7"
        String name = "magnitude" + truncatedVal;

        // Get the integer value for the resource ID with name "magnitude#" using getIdentifier()
        int colorResId = getContext().getResources().
                getIdentifier(name, "color", getContext().getPackageName());

        return colorResId;
    }

    /**
     * Method takes a float and formats it into the format "0.0" as a String.
     *
     * @param number Number to be formatted
     * @return String representation of formatted number
     */
    private String formatDouble(double number) {
        DecimalFormat formatter = new DecimalFormat("0.0");
        return formatter.format(number);
    }
}
